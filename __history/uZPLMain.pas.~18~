unit uZPLMain;

interface

uses
  Windows, FireDAC.Phys.Oracle, ShellAPI, Messages, SysUtils, Variants, Classes, Graphics, Controls, Forms, Dialogs, StdCtrls, ComCtrls,
  frxClass, frxExportBaseDialog, frxExportZPL, IniFiles, frxPrinter, Printers, WinSpool,
  uDemoMain, FireDAC.Stan.Intf, FireDAC.Stan.Option, FireDAC.Stan.Error,
  FireDAC.UI.Intf, FireDAC.Phys.Intf, FireDAC.Stan.Def, FireDAC.Stan.Pool,
  FireDAC.Stan.Async, FireDAC.Phys, FireDAC.Phys.SQLite, FireDAC.Phys.SQLiteDef,
  FireDAC.Stan.ExprFuncs, FireDAC.Phys.SQLiteWrapper.Stat, FireDAC.VCLUI.Wait,
  FireDAC.Stan.Param, FireDAC.DatS, FireDAC.DApt.Intf, FireDAC.DApt,
  frCoreClasses, frxDBSet, Data.DB, FireDAC.Comp.DataSet, FireDAC.Comp.Client,
  frxExportPDF, FireDAC.Phys.OracleDef;

const
  ConfigFileName = 'config.ini';

type
  TfrmZPL = class(TfrmDemoMain)
    FDPhysOracleDriverLink1: TFDPhysOracleDriverLink;
    LSelect_Printer: TLabel;
    Printers: TComboBox;
    ShowZPL: TButton;
    Print: TButton;
    PageControl1: TPageControl;
    Reports: TTabSheet;
    ZPL_text: TTabSheet;
    DesignR: TButton;
    SelectR: TButton;
    ShowR: TButton;
    ZPS: TGroupBox;
    LDensity: TLabel;
    LPrinter_Init: TLabel;
    LPrinter_Finish: TLabel;
    LPage_Init: TLabel;
    LFont_Scale: TLabel;
    LFont: TLabel;
    LCode_Page: TLabel;
    Density: TComboBox;
    PrinterInit: TEdit;
    CodePage: TEdit;
    PrinterFinish: TEdit;
    PageInit: TEdit;
    FontScale: TEdit;
    Font: TEdit;
    PrintAB: TCheckBox;
    Memo1: TMemo;
    LoadFF: TButton;
    LRepName: TLabel;
    FDConnection1: TFDConnection;
    FDQuery1: TFDQuery;
    FDQuery2: TFDQuery;
    FDQuery3: TFDQuery;
    frxDBDataset1: TfrxDBDataset;
    frxDBDataset2: TfrxDBDataset;
    frxDBDataset3: TfrxDBDataset;
    Button1: TButton;
    frxPDFExport1: TfrxPDFExport;
    Button2: TButton;
    LPDFName: TLabel;
    Button3: TButton;
    frxReport1: TfrxReport;
    FDConnection2: TFDConnection;
    FDQuery4: TFDQuery;
    procedure FormCreate(Sender: TObject);
    procedure SelectRClick(Sender: TObject);
    procedure DesignRClick(Sender: TObject);
    procedure ShowRClick(Sender: TObject);
    procedure ShowZPLClick(Sender: TObject);
    procedure PrintClick(Sender: TObject);
    procedure LoadFFClick(Sender: TObject);
    procedure FormClose(Sender: TObject; var Action: TCloseAction);
    procedure Button1Click(Sender: TObject);
    procedure Button2Click(Sender: TObject);
    procedure Button3Click(Sender: TObject);
    procedure ExportReportToPDF1(OutputPDF: String);
  private
    FIsPreparedReport: Boolean;
    FPreview: Boolean;
    FReportFileName: String;
    FPDFExportPath: String;  // Path where the PDF generated from .fr3 is stored
    FModifiedPDFPath: String;  // Path where the modified PDF is stored
    procedure LoadIni();
    procedure SaveIni();
  protected
    function GetCaption: string; override;
  end;

var
  frmZPL: TfrmZPL;

implementation

{$R *.dfm}

procedure TfrmZPL.DesignRClick(Sender: TObject);
var
  AReport: TfrxReport;
begin
  if not FIsPreparedReport then
  begin
    AReport := TfrxReport.Create(Self);
    try
      AReport.LoadFromFile(FReportFileName);
      AReport.DesignReport();
    finally
      AReport.Free;
    end;
  end;
end;

procedure ExportReportToPDF(const ReportFile, OutputPDF: string);
var
  Report: TfrxReport;
  PDFExport: TfrxPDFExport;
begin
  Report := TfrxReport.Create(nil);
  try
    Report.LoadFromFile(ReportFile);
    Report.PrepareReport;

    PDFExport := TfrxPDFExport.Create(nil);
    try
      PDFExport.FileName := OutputPDF;
      PDFExport.ShowProgress := False;
      PDFExport.ShowDialog := False;
      Report.Export(PDFExport);
    finally
      PDFExport.Free;
    end;

  finally
    Report.Free;
  end;
end;

procedure TfrmZPL.ExportReportToPDF1(OutputPDF: String);
var
  PDFExport: TfrxPDFExport;
begin
  frxReport1.PrepareReport;

  PDFExport := TfrxPDFExport.Create(nil);
  try
    PDFExport.FileName := OutputPDF;
    PDFExport.ShowProgress := False;
    PDFExport.ShowDialog := False;
    frxReport1.Export(PDFExport);
  finally
    PDFExport.Free;
  end;
end;

procedure RunPythonScript(const PythonExe, ScriptPath, InputPDF, OutputPDF: string);
var
  StartInfo: TStartupInfo;
  ProcInfo: TProcessInformation;
  Security: TSecurityAttributes;
  ReadHandle, WriteHandle: THandle;
  Buffer: array[0..2047] of AnsiChar;
  ReadBytes: DWORD;
  Command, Output: string;
  ExitCode: DWORD;
begin
  FillChar(Security, SizeOf(TSecurityAttributes), #0);
  Security.nLength := SizeOf(TSecurityAttributes);
  Security.bInheritHandle := True;
  Security.lpSecurityDescriptor := nil;

  if not CreatePipe(ReadHandle, WriteHandle, @Security, 0) then
    RaiseLastOSError;

  FillChar(StartInfo, SizeOf(TStartupInfo), #0);
  StartInfo.cb := SizeOf(TStartupInfo);
  StartInfo.hStdOutput := WriteHandle;
  StartInfo.hStdError := WriteHandle;
  StartInfo.dwFlags := STARTF_USESHOWWINDOW or STARTF_USESTDHANDLES;
  StartInfo.wShowWindow := SW_HIDE;

  Command := Format('"%s" "%s" "%s" "%s"', [PythonExe, ScriptPath, InputPDF, OutputPDF]);
  ShowMessage('Command: ' + Command);  // Debugging the command
  if not CreateProcess(nil, PChar(Command), nil, nil, True, 0, nil, nil, StartInfo, ProcInfo) then
    RaiseLastOSError;

  CloseHandle(WriteHandle);

  try
    Output := '';
    // Adjust the size to SizeOf(Buffer) - 1 to leave space for null termination
    while ReadFile(ReadHandle, Buffer, SizeOf(Buffer) - 1, ReadBytes, nil) and (ReadBytes > 0) do
    begin
      Buffer[ReadBytes] := #0;  // Ensure null-termination
      Output := Output + String(PAnsiChar(@Buffer));
    end;

    WaitForSingleObject(ProcInfo.hProcess, INFINITE);
    GetExitCodeProcess(ProcInfo.hProcess, ExitCode);

    ShowMessage('Python Script Exit Code: ' + IntToStr(ExitCode));
    ShowMessage('Python Script Output: ' + Output);
  finally
    CloseHandle(ProcInfo.hProcess);
    CloseHandle(ProcInfo.hThread);
    CloseHandle(ReadHandle);
  end;
end;

procedure TfrmZPL.Button1Click(Sender: TObject);
var
  ASaveDialog: TSaveDialog;
begin
  inherited;
  if FPDFExportPath = '' then
  begin
    ShowMessage('No PDF is selected to process. Please select a PDF first.');
    Exit;  // Exit if no PDF has been selected
  end;

  if not FileExists(FPDFExportPath) then
  begin
    ShowMessage('The selected PDF file does not exist. Please verify the file path.');
    Exit;  // Exit if the PDF file does not exist
  end;

  ASaveDialog := TSaveDialog.Create(Self);
  try
    ASaveDialog.InitialDir := GetEnvironmentVariable('USERPROFILE') + '\Documents';
    ASaveDialog.Filter := 'PDF File (*.pdf)|*.pdf';
    ASaveDialog.FileName := 'ProcessedOutput.pdf';  // Suggest a default filename
    ASaveDialog.DefaultExt := 'pdf';  // Default extension set to PDF
    ASaveDialog.Options := ASaveDialog.Options + [ofOverwritePrompt, ofPathMustExist, ofNoValidate];

    if ASaveDialog.Execute then
    begin
      FModifiedPDFPath := ASaveDialog.FileName;

      // Ensure the file has a .pdf extension
      if ExtractFileExt(FModifiedPDFPath) <> '.pdf' then
        FModifiedPDFPath := ChangeFileExt(FModifiedPDFPath, '.pdf');

      RunPythonScript('C:\Users\hamoz\AppData\Local\Microsoft\WindowsApps\python.exe',
                      'C:\Users\hamoz\OneDrive\Desktop\FileCheck.py',
                      FPDFExportPath,
                      FModifiedPDFPath);

      // Check if output PDF exists
      if FileExists(FModifiedPDFPath) then
        ShowMessage('PDF created successfully.')
      else
        ShowMessage('Failed to create PDF.');
    end;
  finally
    ASaveDialog.Free;
  end;
end;

procedure TfrmZPL.Button2Click(Sender: TObject);
var
  AOpenDialog: TOpenDialog;
  ASaveDialog: TSaveDialog;
  InputPDFPath, OutputPDFPath, PythonExe, ScriptPath: string;
begin
  inherited;

  AOpenDialog := TOpenDialog.Create(Self);
  ASaveDialog := TSaveDialog.Create(Self);
  try
    AOpenDialog.InitialDir := ExtractFileDir(ParamStr(0));
    AOpenDialog.Filter := 'PDF File (*.pdf)|*.pdf';

    ASaveDialog.InitialDir := GetEnvironmentVariable('USERPROFILE') + '\Documents';
    ASaveDialog.Filter := 'PDF File (*.pdf)|*.pdf';
    ASaveDialog.FileName := 'ProcessedOutput.pdf';
    ASaveDialog.DefaultExt := 'pdf';
    ASaveDialog.Options := ASaveDialog.Options + [ofOverwritePrompt, ofPathMustExist];

    if AOpenDialog.Execute then
    begin
      InputPDFPath := AOpenDialog.FileName;
      LPDFName.Caption := ExtractFileName(InputPDFPath); // Update label text
      LPDFName.Visible := True; // Make label visible when PDF is selected

      if ASaveDialog.Execute then
      begin
        OutputPDFPath := ASaveDialog.FileName;

        if ExtractFileExt(OutputPDFPath) <> '.pdf' then
          OutputPDFPath := ChangeFileExt(OutputPDFPath, '.pdf');

        PythonExe := 'C:\Users\hamoz\AppData\Local\Microsoft\WindowsApps\python.exe';
        ScriptPath := 'C:\Users\hamoz\OneDrive\Desktop\FileCheck2.py';

        RunPythonScript(PythonExe, ScriptPath, InputPDFPath, OutputPDFPath);

        if FileExists(OutputPDFPath) then
          ShowMessage('PDF processed successfully.')
        else
          ShowMessage('Failed to process PDF.');
      end;
    end else begin
      LPDFName.Visible := False; // Keep/Make the label invisible if no PDF is selected
    end;
  finally
    AOpenDialog.Free;
    ASaveDialog.Free;
  end;
end;

procedure OpenPDF(const FilePath: string);
var
  SEIReturn: Integer;
begin
  SEIReturn := ShellExecute(0, 'open', PChar(FilePath), nil, nil, SW_SHOWNORMAL);
  if SEIReturn <= 32 then
    ShowMessage('Failed to open PDF. Error Code: ' + IntToStr(SEIReturn));
end;

procedure TfrmZPL.Button3Click(Sender: TObject);
var
  InputPDF, OutputPDF: String;
  PythonExe, ScriptPath: String;
begin
  inherited;

  // Define the input PDF path
  InputPDF := 'C:\Users\hamoz\OneDrive\Desktop\Report.pdf';

  // Export the report to PDF, ensuring it uses the correct path
  ExportReportToPDF1(InputPDF);

  // Define paths for the Python script execution
  PythonExe := 'C:\Users\hamoz\AppData\Local\Microsoft\WindowsApps\python.exe';
  ScriptPath := 'C:\Users\hamoz\OneDrive\Desktop\FileCheck2.py';
  OutputPDF := ChangeFileExt(InputPDF, '_processed.pdf');

  // Run the Python script
  RunPythonScript(PythonExe, ScriptPath, InputPDF, OutputPDF);

  // Open the processed PDF
  if FileExists(OutputPDF) then
    OpenPDF(OutputPDF)
  else
    ShowMessage('PDF file does not exist: ' + OutputPDF);

  ShellExecute(0, 'open', PChar(OutputPDF), nil, nil, SW_SHOWNORMAL);
  ShowMessage('Output PDF Path: ' + OutputPDF);
end;



procedure TfrmZPL.FormClose(Sender: TObject; var Action: TCloseAction);
begin
  SaveIni();
end;

procedure TfrmZPL.FormCreate(Sender: TObject);
begin
  inherited;

  // Setup Oracle connection (FDConnection2)
  //FDPhysOracleDriverLink1.DriverID := 'Ora';
  //FDConnection2.DriverName := 'Ora';
  //FDConnection2.Params.Clear;
  //FDConnection2.Params.Add('Database=clouddev');  // Ensure this matches your TNS names
  //FDConnection2.Params.Add('User_Name=serviabil_test');
  //FDConnection2.Params.Add('Password=serviabil_test');
  FDConnection2.LoginPrompt := False;

  try
    FDConnection2.Connected := True;
    ShowMessage('Connected to Oracle successfully!');
  except
    on E: Exception do
    begin
      ShowMessage('Failed to connect to Oracle: ' + E.Message);
    end;
  end;

  // Existing initialization code for other functionalities
  Density.ItemIndex := 1;
  Printers.Items.Assign(frxPrinters.Printers);
  if Printers.Items.Count > 0 then
  begin
    Print.Enabled := True;
    Printers.ItemIndex := 0;
  end;
  FIsPreparedReport := false;
  FPreview := false;
  LoadIni;
end;

function TfrmZPL.GetCaption: string;
begin
  Result := 'ZPL Demo';
end;

procedure TfrmZPL.LoadFFClick(Sender: TObject);
var
  AOpenDialog: TOpenDialog;
begin
  AOpenDialog := TOpenDialog.Create(Self);
  try
    AOpenDialog.InitialDir := ExtractFileDir(ParamStr(0));
    AOpenDialog.Filter := 'ZPL File (*.zpl)|*.zpl|Text File (*.txt)|*.txt;';
    if AOpenDialog.Execute() then
      Memo1.Lines.LoadFromFile(AOpenDialog.FileName)
  finally
    AOpenDialog.Free;
  end;
end;

procedure TfrmZPL.PrintClick(Sender: TObject);
var
  AReport: TfrxReport;
  AExpert: TfrxZPLExport;
  AStream: TMemoryStream;
begin
  SaveIni;
  if PageControl1.TabIndex = 0 then
  begin
    if FReportFileName = '' then
      SelectR.Click
    else
    begin
      AReport := TfrxReport.Create(Self);
      try
        AExpert := TfrxZPLExport.Create(Self);
        try
          if not FIsPreparedReport then
          begin
            AReport.LoadFromFile(FReportFileName);
            AReport.PrepareReport();
          end
          else
            AReport.PreviewPages.LoadFromFile(FReportFileName);
          AExpert.ZplDensity := TZplDensity(Density.ItemIndex);
          AExpert.PrinterInit := PrinterInit.Text;
          AExpert.PrinterFinish := PrinterFinish.Text;
          AExpert.CodePage := CodePage.Text;
          AExpert.PageInit := PageInit.Text;
          AExpert.FontScale := StrToFloat(FontScale.Text);
          AExpert.PrinterFont := Font.Text;
          AExpert.PrintAsBitmap := PrintAB.Checked;
          AStream := TMemoryStream.Create();
          try
            AExpert.Stream := AStream;
            AReport.Export(AExpert);
            AStream.Position := 0;
            Memo1.Lines.LoadFromStream(AStream);
          finally
            AStream.Free;
          end;
          if not FPreview then
            WriteToPrinter(Printers.ItemIndex, Printers.Text, Memo1.Text);
        finally
          AExpert.Free;
        end;
      finally
        AReport.Free;
      end;
    end;
  end
  else
  begin
    WriteToPrinter(Printers.ItemIndex, Printers.Text, Memo1.Text);
  end;
end;

procedure TfrmZPL.SelectRClick(Sender: TObject);
var
  AOpenDialog: TOpenDialog;
begin
  AOpenDialog := TOpenDialog.Create(Self);
  try
    AOpenDialog.InitialDir := ExtractFileDir(ParamStr(0));
    AOpenDialog.Filter := 'Report File (*.fr3)|*.fr3|Prepared Report File (*.fp3)|*.fp3;';
    if AOpenDialog.Execute then
    begin
      FReportFileName := AOpenDialog.FileName;  // Store the selected .fr3 file path
      LRepName.Caption := ExtractFileName(FReportFileName);
      LRepName.Visible := True;
      FIsPreparedReport := (ExtractFileExt(FReportFileName) = '.fp3');
      DesignR.Enabled := not FIsPreparedReport;
      ShowR.Enabled := true;

      FPDFExportPath := ChangeFileExt(FReportFileName, '.pdf');  // Dynamically set the export PDF path
      ExportReportToPDF(FReportFileName, FPDFExportPath);
    end;
  finally
    AOpenDialog.Free;
  end;
end;


procedure TfrmZPL.ShowRClick(Sender: TObject);
var
  AReport: TfrxReport;
begin
  AReport := TfrxReport.Create(Self);
  try
    if not FIsPreparedReport then
    begin
      AReport.LoadFromFile(FReportFileName);
      AReport.PrepareReport();
    end
    else
      AReport.PreviewPages.LoadFromFile(FReportFileName);
    AReport.ShowPreparedReport;
  finally
    AReport.Free;
  end;
end;

procedure TfrmZPL.ShowZPLClick(Sender: TObject);
begin
  FPreview := True;
  Print.Click();
  FPreview := False;
  PageControl1.TabIndex := 1;
end;

procedure TfrmZPL.LoadIni();
var
  AIni: TIniFile;
begin
  AIni := TIniFile.Create(ExtractFileDir(Application.ExeName) + '\' + ConfigFileName);
  try
    Density.ItemIndex := AIni.ReadInteger('Settings', 'Density', 1);
    PrinterInit.Text := AIni.ReadString('Settings', 'PrinterInit', '');
    CodePage.Text := AIni.ReadString('Settings', 'CodePage', '^PW464^LS0');
    PrinterFinish.Text := AIni.ReadString('Settings', 'PrinterFinish', '');
    PageInit.Text := AIni.ReadString('Settings', 'PageInit', '');
    FontScale.Text := AIni.ReadString('Settings', 'FontScale', '1,00');
    Font.Text := AIni.ReadString('Settings', 'Font', 'U');
    PrintAB.Checked := AIni.ReadBool('Settings', 'PrintAB', True);
  finally
    AIni.Free;
  end;
end;

procedure TfrmZPL.SaveIni();
var
  AIni: TIniFile;
begin
  AIni := TIniFile.Create(ExtractFileDir(Application.ExeName) + '\' + ConfigFileName);
  try
    AIni.WriteInteger('Settings', 'Density', Density.ItemIndex);
    AIni.WriteString ('Settings', 'PrinterInit', PrinterInit.Text);
    AIni.WriteString ('Settings', 'CodePage', CodePage.Text);
    AIni.WriteString ('Settings', 'PrinterFinish', PrinterFinish.Text);
    AIni.WriteString ('Settings', 'PageInit', PageInit.Text);
    AIni.WriteString ('Settings', 'FontScale', FontScale.Text);
    AIni.WriteString ('Settings', 'Font', Font.Text);
    AIni.WriteBool   ('Settings', 'PrintAB', PrintAB.Checked);
  finally
    AIni.Free;
  end;
end;

end.
